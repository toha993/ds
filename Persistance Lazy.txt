#include<bits/stdc++.h>
#define N 20000010
using namespace std;
long long ar[100010],tree[N],lazy[N];
int root[100010];
int L[N],R[N];
 
int build(int l,int r,int &node)
{
    int in=++node;
    lazy[in]=0;
    if(l==r)
    {
        tree[in]=ar[l];
        return in;
    }
    int mid=(l+r)>>1;
    L[in]=build(l,mid,node);
    R[in]=build(mid+1,r,node);
    tree[in]=tree[L[in]]+tree[R[in]];
    return in;
}
int update(int ql,int qr,int l,int r,int pos,int &node,long long val)
{
    if(l>r || qr<l || ql>r) return pos;
    int in=++node;
    tree[in]=tree[pos];
    lazy[in]=lazy[pos];
    L[in]=L[pos];
    R[in]=R[pos];
    if(ql<=l && r<=qr)
    {
        tree[in]+=1ll*(r-l+1)*val;
        lazy[in]+=val;
        return in;
    }
    int mid=(l+r)>>1;
    L[in]=update(ql,qr,l,mid,L[pos],node,val);
    R[in]=update(ql,qr,mid+1,r,R[pos],node,val);
    tree[in]=tree[L[in]]+tree[R[in]]+1ll*(r-l+1)*lazy[in];
    return in;
}
long long query(int ql,int qr,int l,int r,int pos,long long lz)
{
    if(l>r || ql>r || qr<l) return 0;
    if(ql<=l && r<=qr) return tree[pos]+1ll*(r-l+1)*lz;
    int mid=(l+r)>>1;
    return query(ql,qr,l,mid,L[pos],lz+lazy[pos])+query(ql,qr,mid+1,r,R[pos],lz+lazy[pos]);
}
 
int main()
{
    int n,m;
    while(scanf("%d %d",&n,&m)>0)
    {
        for(int i=1; i<=n; i++)
            scanf("%lld",&ar[i]);
        for(int i=0;i<=m;i++) root[i]=0;
 
        int node=0;
        root[0]=build(1,n,node);
        int q=0;
        while(m--)
        {
            char ch[2];
            scanf("%s",ch);
            if(ch[0]=='C')
            {
                int l,r;
                long long val;
                scanf("%d %d %lld",&l,&r,&val);
                ++q;
                root[q]=update(l,r,1,n,root[q-1],node,val);
            }
            else if(ch[0]=='Q')
            {
                int l,r;
                scanf("%d %d",&l,&r);
                printf("%lld\n",query(l,r,1,n,root[q],0));
            }
            else if(ch[0]=='H')
            {
                int l,r,t;
                scanf("%d %d %d",&l,&r,&t);
                printf("%lld\n",query(l,r,1,n,root[t],0));
            }
            else if(ch[0]=='B')
            {
                int t;
                scanf("%d",&t);
                q=t;
            }
        }
        for(int i=0; i<=node; i++)
        {
            L[i]=R[i]=tree[i]=lazy[i]=0;
        }
    }
    return 0;
}