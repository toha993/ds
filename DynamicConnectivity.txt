Codeforces Educational Round 22
Bipartite Checking

#include<bits/stdc++.h>
#define N 300010
using namespace std;
typedef pair<int,int>pii;
vector<int>dsu;
map<pii,int>mp;
int edge[N][2];
bool flag;

int par[N],sz[N],dep[N];
pii Find(int u)
{
    int d=0;
    while(1)
    {
        if(par[u]==u) break;
        d+=dep[u];
        u=par[u];
    }
    return pii(u,d);
}
void Insert(int u,int v,int pos)
{
    flag=0;
    pii pu=Find(u),pv=Find(v);
    if(pu.first==pv.first)
    {
        int d=pu.second+pv.second;
        if(d%2==0) flag=1;
    }
    else
    {
        if(sz[pu.first]<sz[pv.first]) swap(pu,pv);
        sz[pu.first]+=sz[pv.first];
        dep[pv.first]=pv.second+pu.second+1;
        par[pv.first]=pu.first;
        dsu.push_back(pv.first);
    }
    return;
}
void RevDsu(int n)
{
    while(dsu.size()>n)
    {
        int x=dsu.back();
        dsu.pop_back();
        sz[par[x]]-=sz[x];
        par[x]=x;
        dep[x]=0;
    }
    return;
}

vector<int>tree[4*N];
void upd(int ql,int qr,int l,int r,int pos,int id)
{
    if(l>r || ql>r || qr<l) return;
    if(ql<=l && r<=qr)
    {
        tree[pos].push_back(id);
        return;
    }
    int mid=(l+r)>>1,lson=2*pos,rson=lson+1;
    upd(ql,qr,l,mid,lson,id);
    upd(ql,qr,mid+1,r,rson,id);
}

void dfs(int l,int r,int pos,bool fl)
{
    if(l>r) return;
    int n=dsu.size();
    for(int in : tree[pos])
    {
        int u=edge[in][0];
        int v=edge[in][1];
        Insert(u,v,pos);
        fl|=flag;
    }
    if(l==r)
    {
        if(!fl) puts("YES");
        else puts("NO");
        RevDsu(n);
        return;
    }
    int mid=(l+r)>>1,lson=2*pos,rson=lson+1;
    dfs(l,mid,lson,fl);
    dfs(mid+1,r,rson,fl);
    RevDsu(n);
    return;
}

int st[N];
int main()
{
    int n,k;
    scanf("%d %d",&n,&k);
    for(int i=1; i<=k; i++)
        st[i]=-1;
    for(int i=1; i<=n; i++)
    {
        par[i]=i;
        sz[i]=1;
        dep[i]=0;
    }

    int in=0;
    for(int i=1; i<=k; i++)
    {
        int u,v;
        scanf("%d %d",&u,&v);
        if(u>v) swap(u,v);
        if(mp[pii(u,v)]==0) mp[pii(u,v)]=++in;
        edge[mp[pii(u,v)]][0]=u;
        edge[mp[pii(u,v)]][1]=v;
        if(st[mp[pii(u,v)]]==-1) st[mp[pii(u,v)]]=i;
        else
        {
            upd(st[mp[pii(u,v)]],i-1,1,k,1,mp[pii(u,v)]);
            st[mp[pii(u,v)]]=-1;
        }
    }
    for(int i=1; i<=in; i++)
    {
        if(st[i]==-1) continue;
        upd(st[i],k,1,k,1,i);
    }

    flag=0;
    dfs(1,k,1,0);
    return 0;
}
