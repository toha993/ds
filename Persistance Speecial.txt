#include<bits/stdc++.h>
#define N 100010
using namespace std;
int tree[800*N],valL[800*N],valR[800*N];
void UpdateForVal(int ql,int l,int r,int pos,int prepos,int &valnode,int jog)
{
    if(l>r || ql<l || ql>r) return;
    if(l==r)
    {
        tree[pos]=tree[prepos]+jog;
        return;
    }
    int mid=(l+r)>>1;
    if(l<=ql && ql<=mid)
    {
        valL[pos]=++valnode;
        valR[pos]=valR[prepos];
        UpdateForVal(ql,l,mid,valL[pos],valL[prepos],valnode,jog);
    }
    else
    {
        valL[pos]=valL[prepos];
        valR[pos]=++valnode;
        UpdateForVal(ql,mid+1,r,valR[pos],valR[prepos],valnode,jog);
    }
    tree[pos]=tree[valL[pos]]+tree[valR[pos]];
}
int query(int ql,int qr,int l,int r,int pos)
{
    if(l>r || ql>r || qr<l) return 0;
    if(ql<=l && r<=qr) return tree[pos];
    int mid=(l+r)>>1;
    return query(ql,qr,l,mid,valL[pos])+query(ql,qr,mid+1,r,valR[pos]);
}

int n,valroot[40*N];
int posL[40*N],posR[40*N];
void UpdateForPos(int ql,int l,int r,int pos,int prepos,int &posnode,int val,int &valnode,int jog)
{
    if(l>r) return;

    valnode++;
    valroot[pos]=valnode;
    UpdateForVal(val,1,n,valroot[pos],valroot[prepos],valnode,jog);

    if(l==r) return;
    int mid=(l+r)>>1;
    if(l<=ql && ql<=mid)
    {
        posL[pos]=++posnode;
        posR[pos]=posR[prepos];
        UpdateForPos(ql,l,mid,posL[pos],posL[prepos],posnode,val,valnode,jog);
    }
    else
    {
        posL[pos]=posL[prepos];
        posR[pos]=++posnode;
        UpdateForPos(ql,mid+1,r,posR[pos],posR[prepos],posnode,val,valnode,jog);
    }
}
int DisNumInRange(int ql,int qr,int l,int r,int pos,int val,int var)
{
    if(l>r || ql>r || qr<l) return 0;
    if(ql<=l && r<=qr) return query(val,var,1,n,valroot[pos]);
    int mid=(l+r)>>1;
    return DisNumInRange(ql,qr,l,mid,posL[pos],val,var)+DisNumInRange(ql,qr,mid+1,r,posR[pos],val,var);
}

int ar[N];
vector<int>v;
map<int,int>mp;
int ulta[N];
int posroot[N];
int pre[N];

int main()
{
    int q;
    scanf("%d %d",&n,&q);
    for(int i=1; i<=n; i++)
        scanf("%d",&ar[i]),v.push_back(ar[i]);
    sort(v.begin(),v.end());

    int in=0;
    for(int x : v)
    {
        if(mp[x]) continue;
        mp[x]=++in;
        ulta[in]=x;
    }
    for(int i=1; i<=n; i++)
        ar[i]=mp[ar[i]];

    int posnode=0,valnode=0;
    posroot[0]=0;
    valroot[0]=0;
    for(int i=1; i<=n; i++)
    {
        int x=posroot[i-1];
        //cout << ar[i] << " ";
        if(pre[ar[i]])
        {
            //cout << "biva " ;
            posnode++;
            x=posnode;
            UpdateForPos(pre[ar[i]],1,n,posnode,posroot[i-1],posnode,ar[i],valnode,-1);
            //cout<<DisNumInRange(2,2,1,n,x,2,2)<<endl;
            posroot[i]=x;
        }

        posnode++;
        posroot[i]=posnode;
        UpdateForPos(i,1,n,posroot[i],x,posnode,ar[i],valnode,1);
        pre[ar[i]]=i;
    }
    int ans=0;
    while(q--)
    {
        int a,b,c,d,k;
        scanf("%d %d %d %d %d",&a,&b,&c,&d,&k);
        long long x=(1ll*a*max(ans,0)+1ll*b)%(1ll*n);
        long long y=(1ll*c*max(ans,0)+1ll*d)%(1ll*n);
        int rl=(int)x +1;
        int rr=(int)y +1;
        if(rl>rr) swap(rl,rr);

        int l=1,r=n;
        int mn=10000000;
        while(l<=r)
        {
            int mid=(l+r)>>1;
            int kth=DisNumInRange(rl,rr,1,n,posroot[rr],1,mid);
            if(kth==k) mn=min(mn,mid);
            if(kth>=k) r=mid-1;
            else l=mid+1;
        }
        if(mn==10000000) ans=-1;
        else ans=ulta[mn];
        printf("%d\n",ans);
    }
    return 0;
}
