#include<bits/stdc++.h>
#define N 100010
using namespace std;
int tree[20*N],L[20*N],R[20*N];
void update(int ql,int l,int r,int pos,int prepos,int &motnode)
{
    if(l>r) return;
    if(l==r)
    {
        tree[pos]=tree[prepos]+1;
        return;
    }
    int mid=(l+r)>>1;
    if(l<=ql and ql<=mid)
    {
        L[pos]=++motnode;
        R[pos]=R[prepos];
        update(ql,l,mid,motnode,L[prepos],motnode);
    }
    else
    {
        L[pos]=L[prepos];
        R[pos]=++motnode;
        update(ql,mid+1,r,motnode,R[prepos],motnode);
    }
    tree[pos]=tree[L[pos]]+tree[R[pos]];
}
int query(int ql,int qr,int l,int r,int pos)
{
    if(l>r || ql>r || qr<l) return 0;
    if(ql<=l && r<=qr) return tree[pos];
    int mid=(l+r)>>1;
    return query(ql,qr,l,mid,L[pos])+query(ql,qr,mid+1,r,R[pos]);
}
 
int pre[1000010];
int main()
{
    int n,q,node,root[N];
    scanf("%d",&n);
    node=0;
    root[0]=0;
    for(int i=1;i<=n;i++)
    {
        int a;
        scanf("%d",&a);
        node++;
        root[i]=node;
        update(pre[a],0,n,root[i],root[i-1],node);
        pre[a]=i;
    }
    scanf("%d",&q);
    while(q--)
    {
        int l,r;
        scanf("%d %d",&l,&r);
        printf("%d\n",query(0,l-1,0,n,root[r])-query(0,l-1,0,n,root[l-1]));
    }
    return 0;
}